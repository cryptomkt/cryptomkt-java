package com.cryptomarket.sdk.websocket;

import java.util.List;
import java.util.function.BiConsumer;

import com.cryptomarket.params.ContingencyType;
import com.cryptomarket.params.NotificationType;
import com.cryptomarket.params.OrderBuilder;
import com.cryptomarket.params.OrderType;
import com.cryptomarket.params.ParamsBuilder;
import com.cryptomarket.params.Side;
import com.cryptomarket.params.TimeInForce;
import com.cryptomarket.sdk.exceptions.CryptomarketSDKException;
import com.cryptomarket.sdk.models.Balance;
import com.cryptomarket.sdk.models.Commission;
import com.cryptomarket.sdk.models.Report;

import org.jetbrains.annotations.Nullable;

/**
 * TradingClient connects via websocket to cryptomarket to enable the user to
 * manage orders. uses SHA256 as auth method and authenticates on connection.
 * <p>
 * Requires API keys to make socket calls
 */
public interface CryptomarketWSSpotTradingClient extends CryptomarketWS {

  /**
   * subscribe to a feed of execution reports of the user's orders
   * <p>
   * the first notification is a snapshot of the current orders, further
   * notifications are updates of the user orders
   * <p>
   * https://api.exchange.cryptomkt.com/#socket-spot-trading
   *
   * @param notificationBiConsumer recieves a list of reports,, and the
   *                               type of notification, either SNAPSHOT or UPDATE
   * @param resultBiConsumer       Optional. recieves true if the subscription is
   *                               successfull, and a CryptomarketSDKException if
   *                               there was a problem (or null if there was none)
   */
  public void subscribeToReports(BiConsumer<List<Report>, NotificationType> notificationBiConsumer,
      @Nullable BiConsumer<Boolean, CryptomarketSDKException> resultBiConsumer);

  /**
   * stop recieveing the report feed subscription
   * <p>
   * https://api.exchange.cryptomkt.com/#socket-spot-trading
   *
   *
   * @param resultBiConsumer Optional. recieves true if the unsubscription is
   *                         successfull, and a CryptomarketSDKException if
   *                         there was a problem (or null if there was none)
   */
  public void unsubscribeToReports(@Nullable BiConsumer<Boolean, CryptomarketSDKException> resultBiConsumer);

  /**
   * Get the user's active spot orders
   * <p>
   * https://api.exchange.cryptomkt.com/#get-active-spot-orders
   *
   * @param resultBiConsumer recieves a list of active orders, and a
   *                         CryptomarketSDKException if there was a problem (or
   *                         null if there was none)
   */
  public void getAllActiveOrders(BiConsumer<List<Report>, CryptomarketSDKException> resultBiConsumer);

  /**
   * Creates a new spot order
   * <p>
   * For fee, for price accuracy and quantity, and for order status information
   * see the api docs
   * <p>
   * https://api.exchange.cryptomkt.com/#create-new-spot-order
   *
   * @param symbol           Trading symbol
   * @param side             Either 'buy' or 'sell'
   * @param quantity         Order quantity
   * @param clientOrderID    Optional. If given must be unique within the trading
   *                         day, including all active orders. If not given, is
   *                         generated by the server
   * @param orderType        Optional. 'limit', 'market', 'stopLimit',
   *                         'stopMarket',
   *                         'takeProfitLimit' or 'takeProfitMarket'. Default is
   *                         'limit'
   * @param timeInForce      Optional. 'GTC', 'IOC', 'FOK', 'Day', 'GTD'. Default
   *                         to
   *                         'GTC'
   * @param price            Optional. Required for 'limit' and 'stopLimit'. limit
   *                         price of the order
   * @param stopPrice        Optional. Required for 'stopLimit' and 'stopMarket'
   *                         orders. stop price of the order
   * @param expireTime       Optional. Required for orders with timeInForce = GDT
   * @param strictValidate   Optional. If False, the server rounds half down for
   *                         tickerSize and quantityIncrement. Example of ETHBTC:
   *                         tickSize = '0.000001', then price '0.046016' is
   *                         valid,
   *                         '0.0460165' is invalid
   * @param postOnly         Optional. If True, your post_only order causes a
   *                         match
   *                         with a pre-existing order as a taker, then the order
   *                         will be cancelled
   * @param takeRate         Optional. Liquidity taker fee, a fraction of order
   *                         volume, such as 0.001 (for 0.1% fee). Can only
   *                         increase
   *                         the fee. Used for fee markup.
   * @param makeRate         Optional. Liquidity provider fee, a fraction of order
   *                         volume, such as 0.001 (for 0.1% fee). Can only
   *                         increase
   *                         the fee. Used for fee markup
   * @param resultBiConsumer Optional. recieves a report for the newly created
   *                         order, and a CryptomarketSDKException if
   *                         there was a problem (or null if there was none)
   */
  public void createSpotOrder(
      String symbol,
      Side side,
      String quantity,
      @Nullable String clientOrderID,
      @Nullable OrderType orderType,
      @Nullable String price,
      @Nullable String stopPrice,
      @Nullable TimeInForce timeInForce,
      @Nullable String expireTime,
      @Nullable Boolean strictValidate,
      @Nullable Boolean postOnly,
      @Nullable String takeRate,
      @Nullable String makeRate,
      @Nullable BiConsumer<Report, CryptomarketSDKException> resultBiConsumer);

  /**
   * Creates a new spot order
   * <p>
   * For fee, for price accuracy and quantity, and for order status information
   * see the api docs
   * <p>
   * https://api.exchange.cryptomkt.com/#create-new-spot-order
   *
   * @param paramsBuilder    takes all other arguments except callback as chain
   *                         methods
   * @param symbol           Trading symbol
   * @param side             Either 'buy' or 'sell'
   * @param quantity         Order quantity
   * @param clientOrderID    Optional. If given must be unique within the trading
   *                         day, including all active orders. If not given, is
   *                         generated by the server
   * @param orderType        Optional. 'limit', 'market', 'stopLimit',
   *                         'stopMarket', 'takeProfitLimit' or
   *                         'takeProfitMarket'. Default is 'limit'
   * @param timeInForce      Optional. 'GTC', 'IOC', 'FOK', 'Day', 'GTD'. Default
   *                         is 'GTC'
   * @param price            Optional. Required for 'limit' and 'stopLimit'. limit
   *                         price of the order
   * @param stopPrice        Optional. Required for 'stopLimit' and 'stopMarket'
   *                         orders. stop price of the order
   * @param expireTime       Optional. Required for orders with timeInForce = GDT
   * @param strictValidate   Optional. If False, the server rounds half down for
   *                         tickerSize and quantityIncrement. Example of ETHBTC:
   *                         tickSize = '0.000001', then price '0.046016' is
   *                         valid, '0.0460165' is invalid
   * @param postOnly         Optional. If True, your post_only order causes a
   *                         match with a pre-existing order as a taker, then the
   *                         order
   *                         will be cancelled
   * @param takeRate         Optional. Liquidity taker fee, a fraction of order
   *                         volume, such as 0.001 (for 0.1% fee). Can only
   *                         increase the fee. Used for fee markup.
   * @param makeRate         Optional. Liquidity provider fee, a fraction of order
   *                         volume, such as 0.001 (for 0.1% fee). Can only
   *                         increase the fee. Used for fee markup
   * @param resultBiConsumer Optional. recieves a report for the newly created
   *                         order, and a CryptomarketSDKException if
   *                         there was a problem (or null if there was none)
   */
  public void createSpotOrder(
      ParamsBuilder paramsBuilder,
      @Nullable BiConsumer<Report, CryptomarketSDKException> resultBiConsumer);

  /**
   * creates a list of spot orders
   * <p>
   * <b>Types or contingency:</b>
   * <ul>
   * <li>ContingencyType.ALL_OR_NONE (AON)
   * <li>ContingencyType.ONE_CANCEL_OTHER (OCO)
     * <li>ContingencyType.ONE_TRIGGER_OTHER (OTO)
   * <li>ContingencyType.ONE_TRIGGER_ONE_CANCEL_OTHER (OTOCO)
   * </ul>
   * <p>
   * <b>Restriction in the number of orders:</b>
   * <ul>
   * <li>An AON list must have 2 or 3 orders
   * <li>An OCO list must have 2 or 3 orders
   * <li>An OTO list must have 2 or 3 orders
   * <li>An OTOCO must have 3 or 4 orders
   * </ul>
   * <p>
   * <b>Symbol restrictions:</b>
   * <ul>
   * <li>For an AON order list, the symbol code of orders must be unique for each
   * order in the list.
   * <li>For an OCO order list, there are no symbol code restrictions.
   * <li>For an OTO order list, there are no symbol code restrictions.
   * <li>For an OTOCO order list, the symbol code of orders must be the same for
   * all orders in the list (placing orders in different order books is not
   * supported).
   * </ul>
   * <p>
   * <b> OrderType restrictions:</b>
   * <ul>
   * <li>For an AON order list, orders must be OrderType.LIMIT or OrderType.Market
   * <li>For an OCO order list, orders must be OrderType.LIMIT,
   * OrderType.STOP_LIMIT,
   * OrderType.STOP_MARKET, OrderType.TAKE_PROFIT_LIMIT or
   * OrderType.TAKE_PROFIT_MARKET.
   * <li>An OCO order list cannot include more than one limit order (the same
   * applies to secondary orders in an OTOCO order list).
   * <li>For an OTO order list, there are no order type restrictions.
   * <li>For an OTOCO order list, the first order must be OrderType.LIMIT,
   * OrderType.MARKET, OrderType.STOP_LIMIT, OrderType.STOP_MARKET,
   * OrderType.TAKE_PROFIT_LIMIT or OrderType.TAKE_PROFIT_MARKET.
   * <li>For an OTOCO order list, the secondary orders have the same restrictions
   * as an OCO order
   * <li>Default is OrderType.Limit
   * </ul>
   * <p>
   * https://api.exchange.cryptomkt.com/#create-new-spot-order-list-2
   *
   * @param contingencyType  order list type. ContingencyType.ALL_OR_NONE,
   *                         ContingencyType.ONE_CANCEL_OTHER,
   *                         ContingencyType.ONE_TRIGGER_OTHER or
   *                         ContingencyType.ONE_TRIGGER_ONE_CANCEL_OTHER
   * @param orders           the list of orders
   * @param orderListID      Optional. order list identifier. If ommited, it will
   *                         be generated by the system. Must be equal to the
   *                         client order id of the first order in the request
   * @param resultBiConsumer Optional. recieves a list of reports for the created
   *                         orders, and a CryptomarketSDKException if
   *                         there was a problem (or null if there was none)
   */
  public void createSpotOrderList(
      ContingencyType contingencyType,
      List<OrderBuilder> orders,
      @Nullable String orderListID,
      @Nullable BiConsumer<List<Report>, CryptomarketSDKException> resultBiConsumer);

  /**
   * cancels a spot order
   * <p>
   * https://api.exchange.cryptomkt.com/#cancel-spot-order-2
   *
   * @param clientOrderID    the client order id of the order to cancel
   * @param resultBiConsumer Optional. recieves a report of the canceled order
   */
  public void cancelSpotOrder(String clientOrderID,
      @Nullable BiConsumer<Report, CryptomarketSDKException> resultBiConsumer);

  /**
   * changes the parameters of an existing order, quantity or price
   * <p>
   * https://api.exchange.cryptomkt.com/#cancel-replace-spot-order
   *
   * @param clientOrderID    the client order id of the order to change
   * @param newClientOrderID the new client order id for the modified order. must
   *                         be unique within the trading day
   * @param quantity         new order quantity
   * @param price            new order price
   * @param strictValidate   price and quantity will be checked for the
   *                         incrementation with tick size and quantity step. See
   *                         symbol's tick_size and quantity_increment
   * @param resultBiConsumer Optional. recieves a report of the order in its new
   *                         version, and a CryptomarketSDKException if
   *                         there was a problem (or null if there was none)
   *
   */
  public void replaceSpotOrder(
      String clientOrderID,
      String newClientOrderID,
      @Nullable String quantity,
      @Nullable String price,
      @Nullable Boolean strictValidate,
      @Nullable BiConsumer<Report, CryptomarketSDKException> resultBiConsumer);

  /**
   * cancel all active spot orders and returns the ones that could not be canceled
   * <p>
   * https://api.exchange.cryptomkt.com/#cancel-spot-orders
   *
   * @param resultBiConsumer recieves a list of reports for the orders which could
   *                         not be canceled, and a CryptomarketSDKException if
   *                         there was a problem (or null if there was none)
   */
  public void cancelAllSpotOrders(
      @Nullable BiConsumer<List<Report>, CryptomarketSDKException> resultBiConsumer);

  /**
   * Get the user's spot trading balance for all currencies with balance
   * <p>
   * https://api.exchange.cryptomkt.com/#get-spot-trading-balance
   *
   * @param resultBiConsumer recieves a list of balances, and a
   *                         CryptomarketSDKException if there was a problem (or
   *                         null if there was none)
   */
  public void getSpotTradingBalances(BiConsumer<List<Balance>, CryptomarketSDKException> resultBiConsumer);

  /**
   * Get the user spot trading balance of a currency
   * <p>
   * https://api.exchange.cryptomkt.com/#get-spot-trading-balance
   *
   * @param currency         The currency code to query the balance
   * @param resultBiConsumer recieves a balance, and a CryptomarketSDKException if
   *                         there was a problem (or null if there was none)
   */
  public void getSpotTradingBalanceOfCurrency(String currency,
      BiConsumer<Balance, CryptomarketSDKException> resultBiConsumer);

  /**
   * Get the personal trading commission rates for all symbols
   * <p>
   * https://api.exchange.cryptomkt.com/#get-all-trading-commission
   *
   * @param resultBiConsumer recieves a list of tradding commissions, and a
   *                         CryptomarketSDKException if there was a problem (or
   *                         null if there was none)
   */
  public void getSpotCommissions(BiConsumer<List<Commission>, CryptomarketSDKException> resultBiConsumer);

  /**
   * Get the personal trading commission rate of a symbol
   * <p>
   * https://api.exchange.cryptomkt.com/#get-trading-commission
   *
   * @param symbol           The symbol of the commission rate
   * @param resultBiConsumer recieves a trading commissiom, and a
   *                         CryptomarketSDKException if there was a problem (or
   *                         null if there was none)
   */
  public void getSpotCommissionOfSymbol(String symbol,
      BiConsumer<Commission, CryptomarketSDKException> resultBiConsumer);

}
